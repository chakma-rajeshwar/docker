1. Update app: app.get('/', (req, res) => res.send('Hello Chris!'))
2. Run the container with a name: sudo docker run -d -p 8000:3000 --name my-container docker-demo/node
3. Run multiple commands at a time: docker stop my-container && docker rm my-container && docker build -t docker-demo/node . && docker run -d -p 8000:3000 --name my-container docker-demo/node
4. Creating and managing a volume: sudo docker volume create vol1
                                       sudo docker volume ls
                                       sudo docker volume rm vol1
                                       sudo docker volume prune #This will remove all the unused volumes
5. The inspect command that allows us to see more details on our created volume: sudo docker inspect volume-name
6. Mounting a volume in your application: docker run -d -p 8000:3000 --name my-container --volume my-volume:/logs docker-demo/node
7. Next step is to locate our volume inside of our container. Let’s get into our container with: docker exec -it my-container bash
   and thereafter navigate to our /logs directory: 
                     app@vm-devops:~/docker-dev$ sudo docker exec -it my-container bash
                     root@ceec1913918a:/app# ls
                     Dockerfile  app.js  node_modules  package-lock.json  package.json
                     root@ceec1913918a:/app# cd ..
                     root@ceec1913918a:/# ls
                     app  bin  boot  dev  etc  home  lib  lib64  logs  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var 
                     root@ceec1913918a:/# cd logs/
                     root@ceec1913918a:/logs# echo logging... > logs.txt
                     root@ceec1913918a:/logs# ls
                     logs.txt
                     root@ceec1913918a:/logs# 
now if we bring down our container everything we created in our volume should be persisted and everything that is not placed in the volume should be gone right? Yep, that’s the idea.

8. Now Mounting a subdirectory as a volume: mkdir logs
                                            cd logs
                                            nano logs.txt // logging host...
Now run the container: docker run -d -p 8000:3000 --name my-container --volume $(pwd)/logs:/logs docker-demo/node

9. Treating our application as a volume: docker stop my-container && docker rm my-container
                                         docker run -d -p 8000:3000 --name my-container --volume $(pwd):/app docker-demo/node
10. Install nodemon library: npm install --save-dev nodemon #We use this library to restart the web server
11. Edit the package.json file and add the code:

"scripts": {
  "start": "nodemon app.js",
  "log": "echo \"Logging something to screen\""
}
12. Update Dockerfile also: ENTRYPOINT ["node", "app.js"] to ENTRYPOINT ["npm", "start"]
13. Again do the command: docker stop my-container && docker rm my-container && docker build -t docker-demo/node . && docker run -d -p 8000:3000 --name my-container --volume $(pwd):/app docker-demo/node
14. Now test changing by adding some code on the app.js file: app.get('/nodemon', (req, res) => res.send('hello from nodemon'))
15. Run: http://157.230.93.49:8000/nodemon
